pipeline
{
    agent any
    
    tools{
    maven 'Maven'
    }
    
   stages{
    stage('Build')
        {
            steps{
              sh 'mvn clean install'
                 }
         }
         stage('SonarQube analysis') {
       steps{
        withSonarQubeEnv('SonarQube') {
            sh 'mvn sonar:sonar -Pprofile1'
           }
       }
   }
      stage("Quality Gate") {
            steps {
              timeout(time: 10, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
       stage('Nexus')
    {
     steps{
          withCredentials([usernamePassword(credentialsId: 'nexus_Credentials', passwordVariable: 'pass', usernameVariable: 'userId')]) {
            sh   'curl -F file=@target/dynamic_new-${BUILD_NUMBER}.war -u $userId:$pass http://ec2-18-224-155-110.us-east-2.compute.amazonaws.com:8081/nexus/content/repositories/devopstraining/Codekillers/dynamic_new-${BUILD_NUMBER}.war'
          }   
        }
        
    }
   
      stage('Uploading manifest to PuppetMaster'){
            steps{
                withCredentials([string(credentialsId: 'padmin_password', variable: 'puppet_pwd')]){
                sh 'sshpass -p ${puppet_pwd} scp -v -o StrictHostKeyChecking=no site.pp padmin@18.224.184.122:/etc/puppetlabs/code/environments/production/manifests/'
                }
            }
            
        }
         stage('Running Command in PuppetNode'){
            steps{
                withCredentials([string(credentialsId: 'padmin_password', variable: 'puppet_pwd')]){
                sh 'sshpass -p ${puppet_pwd} ssh -v -o StrictHostKeyChecking=no padmin@3.19.65.223 -C \"sudo /opt/puppetlabs/bin/puppet agent -t"'
                sh 'sshpass -p ${puppet_pwd} ssh -v -o StrictHostKeyChecking=no padmin@3.19.65.223 -C \"true"'
                
                }
            }
            
        }
   }
   post { 
         success { 
            echo 'notified to slack '
            slackSend  channel: '#puppetdemo', color: '#00FF00', message: " JOB SUCCESSFUL: Job '${JOB_NAME} [${BUILD_NUMBER}]' (${BUILD_URL})", teamDomain: 'codekillerss', tokenCredentialId: 'demooo'         
            }
         failure {
            echo 'notified to slack'
            slackSend  channel: '#puppetdemo', color: '#00FF00', message: ' JOB FAILURE: Job \'${JOB_NAME} [${BUILD_NUMBER}]\' (${BUILD_URL})', teamDomain: 'codekillerss', tokenCredentialId: 'demooo'
         }
    }
      }

